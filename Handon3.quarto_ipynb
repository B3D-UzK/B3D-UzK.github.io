{
  "cells": [
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "from sklearn.datasets import make_moons\n",
        "from sklearn.model_selection import train_test_split\n",
        "import matplotlib.pyplot as plt\n",
        "import warnings\n",
        "\n",
        "# Suppress all RuntimeWarnings\n",
        "warnings.filterwarnings('ignore', category=RuntimeWarning)"
      ],
      "id": "c0e9b406",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Generate the dataset\n",
        "X, y = make_moons(n_samples=1000, noise=0.03, random_state=42)\n",
        "\n",
        "# Split the dataset into training and test sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Convert the data to PyTorch tensors\n",
        "X_train = torch.tensor(X_train, dtype=torch.float32)\n",
        "X_test = torch.tensor(X_test, dtype=torch.float32)\n",
        "y_train = torch.tensor(y_train, dtype=torch.float32).unsqueeze(1)  # Change to (N, 1)\n",
        "y_test = torch.tensor(y_test, dtype=torch.float32).unsqueeze(1)  # Change to (N, 1)"
      ],
      "id": "1b741168",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Define the neural network model\n",
        "class MoonModel(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(MoonModel, self).__init__()\n",
        "        self.layer_1 = nn.Linear(2, 10)\n",
        "        self.layer_2 = nn.Linear(10, 10)\n",
        "        self.layer_3 = nn.Linear(10, 10)\n",
        "        self.output = nn.Linear(10, 1)  # Single output neuron\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = torch.relu(self.layer_1(x))\n",
        "        x = torch.relu(self.layer_2(x))\n",
        "        x = torch.relu(self.layer_3(x))\n",
        "        x = self.output(x)\n",
        "        return x\n",
        "\n",
        "model = MoonModel()"
      ],
      "id": "0f6e3410",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Define the loss function and the optimizer\n",
        "criterion = nn.BCEWithLogitsLoss()\n",
        "optimizer = optim.Adam(model.parameters(), lr=0.001)"
      ],
      "id": "8652caf8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Train the model\n",
        "epochs = 1000\n",
        "losses = []\n",
        "\n",
        "for epoch in range(epochs):\n",
        "    model.train()\n",
        "    optimizer.zero_grad()\n",
        "    outputs = model(X_train)\n",
        "    loss = criterion(outputs, y_train)\n",
        "    loss.backward()\n",
        "    optimizer.step()\n",
        "\n",
        "    if (epoch+1) % 100 == 0:\n",
        "        print(f'Epoch [{epoch+1}/{epochs}], Loss: {loss.item():.4f}')\n",
        "\n",
        "    losses.append(loss.item())"
      ],
      "id": "057ae9f7",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Plot the training loss\n",
        "plt.plot(losses)\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Loss')\n",
        "plt.title('Training Loss')\n",
        "plt.show()"
      ],
      "id": "6b48ddc8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "model.eval()\n",
        "with torch.no_grad():\n",
        "    train_outputs = model(X_train)\n",
        "    test_outputs = model(X_test)\n",
        "    train_pred = torch.round(torch.sigmoid(train_outputs))\n",
        "    test_pred = torch.round(torch.sigmoid(test_outputs))\n",
        "\n",
        "    train_accuracy = (train_pred.eq(y_train).sum() / float(y_train.shape[0])).item()\n",
        "    test_accuracy = (test_pred.eq(y_test).sum() / float(y_test.shape[0])).item()\n",
        "\n",
        "print(f'Train Accuracy: {train_accuracy*100:.2f}%')\n",
        "print(f'Test Accuracy: {test_accuracy*100:.2f}%')\n",
        "\n",
        "# Plot the results\n",
        "plt.figure(figsize=(10, 5))\n",
        "\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.title('Train Data')\n",
        "plt.scatter(X_train[:, 0], X_train[:, 1], c=train_pred[:, 0], cmap='coolwarm', alpha=0.6)\n",
        "plt.xlabel('Feature 1')\n",
        "plt.ylabel('Feature 2')\n",
        "\n",
        "plt.subplot(1, 2, 2)\n",
        "plt.title('Test Data')\n",
        "plt.scatter(X_test[:, 0], X_test[:, 1], c=test_pred[:, 0], cmap='coolwarm', alpha=0.6)\n",
        "plt.xlabel('Feature 1')\n",
        "plt.ylabel('Feature 2')\n",
        "\n",
        "plt.show()"
      ],
      "id": "d9d52c86",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Function 1: plot decision boundary\n",
        "import numpy as np\n",
        "def plot_decision_boundary(model: torch.nn.Module, X: torch.Tensor, y: torch.Tensor):\n",
        "    \"\"\"\n",
        "    Plots decision boundaries of model predictions on X in comparison to y.\n",
        "    \"\"\"\n",
        "    # Move model and data to CPU\n",
        "    model.to(\"cpu\")\n",
        "    X, y = X.to(\"cpu\"), y.to(\"cpu\")\n",
        "\n",
        "    # Setup grid for plotting decision boundaries\n",
        "    x_min, x_max = X[:, 0].min() - 0.1, X[:, 0].max() + 0.1\n",
        "    y_min, y_max = X[:, 1].min() - 0.1, X[:, 1].max() + 0.1\n",
        "    xx, yy = np.meshgrid(np.linspace(x_min, x_max, 101), np.linspace(y_min, y_max, 101))\n",
        "\n",
        "    # Prepare data for prediction\n",
        "    X_to_pred_on = torch.from_numpy(np.c_[xx.ravel(), yy.ravel()]).float()\n",
        "\n",
        "    # Make predictions\n",
        "    model.eval()\n",
        "    with torch.no_grad():\n",
        "        y_logits = model(X_to_pred_on)\n",
        "\n",
        "    # Adjust logits to prediction labels\n",
        "    if len(torch.unique(y)) > 2:\n",
        "        y_pred = torch.softmax(y_logits, dim=1).argmax(dim=1)  # multi-class\n",
        "    else:\n",
        "        y_pred = torch.round(torch.sigmoid(y_logits))  # binary\n",
        "\n",
        "    # Reshape predictions and plot\n",
        "    y_pred = y_pred.reshape(xx.shape).numpy()\n",
        "    plt.contourf(xx, yy, y_pred, cmap=plt.cm.RdYlBu, alpha=0.7)\n",
        "    plt.scatter(X[:, 0], X[:, 1], c=y, s=40, cmap=plt.cm.RdYlBu)\n",
        "    plt.xlim(xx.min(), xx.max())\n",
        "    plt.ylim(yy.min(), yy.max())\n",
        "    plt.show()\n",
        "\n",
        "# Function 2: plot predictions\n",
        "def plot_predictions(train_data, train_labels, test_data, test_labels, predictions=None):\n",
        "    \"\"\"\n",
        "    Plots training and test data and compares predictions if provided.\n",
        "    \"\"\"\n",
        "    #plt.figure(figsize=(10, 7))\n",
        "\n",
        "    # Plot training data\n",
        "    plt.scatter(train_data, train_labels, c=\"b\", s=4, label=\"Training data\")\n",
        "\n",
        "    # Plot test data\n",
        "    plt.scatter(test_data, test_labels, c=\"g\", s=4, label=\"Testing data\")\n",
        "\n",
        "    if predictions is not None:\n",
        "        # Plot predictions on test data\n",
        "        plt.scatter(test_data, predictions, c=\"r\", s=4, label=\"Predictions\")\n",
        "\n",
        "    # Display legend\n",
        "    plt.legend(prop={\"size\": 14})\n",
        "    plt.show()"
      ],
      "id": "dcdc320e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Plot decision boundaries for training and test sets\n",
        "plt.figure(figsize=(6, 6))\n",
        "plt.title(\"Train\")\n",
        "plot_decision_boundary(model, X_train, y_train)\n",
        "\n",
        "plt.figure(figsize=(6, 6))\n",
        "plt.title(\"Test\")\n",
        "plot_decision_boundary(model, X_test, y_test)"
      ],
      "id": "f2b1693f",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/ngo/Library/Python/3.12/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}