{
  "hash": "9067918ebba696318ae8f65189f120c8",
  "result": {
    "markdown": "::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom sklearn.datasets import make_moons\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport warnings\n\n# Suppress all RuntimeWarnings\nwarnings.filterwarnings('ignore', category=RuntimeWarning)\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Generate the dataset\nX, y = make_moons(n_samples=1000, noise=0.03, random_state=42)\n\n# Split the dataset into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Convert the data to PyTorch tensors\nX_train = torch.tensor(X_train, dtype=torch.float32)\nX_test = torch.tensor(X_test, dtype=torch.float32)\ny_train = torch.tensor(y_train, dtype=torch.float32).unsqueeze(1)  # Change to (N, 1)\ny_test = torch.tensor(y_test, dtype=torch.float32).unsqueeze(1)  # Change to (N, 1)\n```\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Define the neural network model\nclass MoonModel(nn.Module):\n    def __init__(self):\n        super(MoonModel, self).__init__()\n        self.layer_1 = nn.Linear(2, 10)\n        self.layer_2 = nn.Linear(10, 10)\n        self.layer_3 = nn.Linear(10, 10)\n        self.output = nn.Linear(10, 1)  # Single output neuron\n\n    def forward(self, x):\n        x = torch.relu(self.layer_1(x))\n        x = torch.relu(self.layer_2(x))\n        x = torch.relu(self.layer_3(x))\n        x = self.output(x)\n        return x\n\nmodel = MoonModel()\n```\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Define the loss function and the optimizer\ncriterion = nn.BCEWithLogitsLoss()\noptimizer = optim.Adam(model.parameters(), lr=0.001)\n```\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# Train the model\nepochs = 1000\nlosses = []\n\nfor epoch in range(epochs):\n    model.train()\n    optimizer.zero_grad()\n    outputs = model(X_train)\n    loss = criterion(outputs, y_train)\n    loss.backward()\n    optimizer.step()\n\n    if (epoch+1) % 100 == 0:\n        print(f'Epoch [{epoch+1}/{epochs}], Loss: {loss.item():.4f}')\n\n    losses.append(loss.item())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEpoch [100/1000], Loss: 0.5655\nEpoch [200/1000], Loss: 0.3441\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nEpoch [300/1000], Loss: 0.1973\nEpoch [400/1000], Loss: 0.1112\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nEpoch [500/1000], Loss: 0.0625\nEpoch [600/1000], Loss: 0.0319\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nEpoch [700/1000], Loss: 0.0166\nEpoch [800/1000], Loss: 0.0096\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nEpoch [900/1000], Loss: 0.0061\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nEpoch [1000/1000], Loss: 0.0041\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# Plot the training loss\nplt.plot(losses)\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.title('Training Loss')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](Handon3_files/figure-html/cell-7-output-1.png){width=589 height=449}\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nmodel.eval()\nwith torch.no_grad():\n    train_outputs = model(X_train)\n    test_outputs = model(X_test)\n    train_pred = torch.round(torch.sigmoid(train_outputs))\n    test_pred = torch.round(torch.sigmoid(test_outputs))\n\n    train_accuracy = (train_pred.eq(y_train).sum() / float(y_train.shape[0])).item()\n    test_accuracy = (test_pred.eq(y_test).sum() / float(y_test.shape[0])).item()\n\nprint(f'Train Accuracy: {train_accuracy*100:.2f}%')\nprint(f'Test Accuracy: {test_accuracy*100:.2f}%')\n\n# Plot the results\nplt.figure(figsize=(10, 5))\n\nplt.subplot(1, 2, 1)\nplt.title('Train Data')\nplt.scatter(X_train[:, 0], X_train[:, 1], c=train_pred[:, 0], cmap='coolwarm', alpha=0.6)\nplt.xlabel('Feature 1')\nplt.ylabel('Feature 2')\n\nplt.subplot(1, 2, 2)\nplt.title('Test Data')\nplt.scatter(X_test[:, 0], X_test[:, 1], c=test_pred[:, 0], cmap='coolwarm', alpha=0.6)\nplt.xlabel('Feature 1')\nplt.ylabel('Feature 2')\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrain Accuracy: 100.00%\nTest Accuracy: 100.00%\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](Handon3_files/figure-html/cell-8-output-2.png){width=823 height=449}\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# Function 1: plot decision boundary\nimport numpy as np\ndef plot_decision_boundary(model: torch.nn.Module, X: torch.Tensor, y: torch.Tensor):\n    \"\"\"\n    Plots decision boundaries of model predictions on X in comparison to y.\n    \"\"\"\n    # Move model and data to CPU\n    model.to(\"cpu\")\n    X, y = X.to(\"cpu\"), y.to(\"cpu\")\n\n    # Setup grid for plotting decision boundaries\n    x_min, x_max = X[:, 0].min() - 0.1, X[:, 0].max() + 0.1\n    y_min, y_max = X[:, 1].min() - 0.1, X[:, 1].max() + 0.1\n    xx, yy = np.meshgrid(np.linspace(x_min, x_max, 101), np.linspace(y_min, y_max, 101))\n\n    # Prepare data for prediction\n    X_to_pred_on = torch.from_numpy(np.c_[xx.ravel(), yy.ravel()]).float()\n\n    # Make predictions\n    model.eval()\n    with torch.no_grad():\n        y_logits = model(X_to_pred_on)\n\n    # Adjust logits to prediction labels\n    if len(torch.unique(y)) > 2:\n        y_pred = torch.softmax(y_logits, dim=1).argmax(dim=1)  # multi-class\n    else:\n        y_pred = torch.round(torch.sigmoid(y_logits))  # binary\n\n    # Reshape predictions and plot\n    y_pred = y_pred.reshape(xx.shape).numpy()\n    plt.contourf(xx, yy, y_pred, cmap=plt.cm.RdYlBu, alpha=0.7)\n    plt.scatter(X[:, 0], X[:, 1], c=y, s=40, cmap=plt.cm.RdYlBu)\n    plt.xlim(xx.min(), xx.max())\n    plt.ylim(yy.min(), yy.max())\n    plt.show()\n\n# Function 2: plot predictions\ndef plot_predictions(train_data, train_labels, test_data, test_labels, predictions=None):\n    \"\"\"\n    Plots training and test data and compares predictions if provided.\n    \"\"\"\n    #plt.figure(figsize=(10, 7))\n\n    # Plot training data\n    plt.scatter(train_data, train_labels, c=\"b\", s=4, label=\"Training data\")\n\n    # Plot test data\n    plt.scatter(test_data, test_labels, c=\"g\", s=4, label=\"Testing data\")\n\n    if predictions is not None:\n        # Plot predictions on test data\n        plt.scatter(test_data, predictions, c=\"r\", s=4, label=\"Predictions\")\n\n    # Display legend\n    plt.legend(prop={\"size\": 14})\n    plt.show()\n```\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# Plot decision boundaries for training and test sets\nplt.figure(figsize=(6, 6))\nplt.title(\"Train\")\nplot_decision_boundary(model, X_train, y_train)\n\nplt.figure(figsize=(6, 6))\nplt.title(\"Test\")\nplot_decision_boundary(model, X_test, y_test)\n```\n\n::: {.cell-output .cell-output-display}\n![](Handon3_files/figure-html/cell-10-output-1.png){width=516 height=505}\n:::\n\n::: {.cell-output .cell-output-display}\n![](Handon3_files/figure-html/cell-10-output-2.png){width=507 height=505}\n:::\n:::\n\n\n",
    "supporting": [
      "Handon3_files"
    ],
    "filters": [],
    "includes": {}
  }
}